C      _____                __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo''s root directory.

#include "EBLGIntegrator.H"
#include "CONSTANTS.H"
cccccccccccccccc
      subroutine setplanarshock(
     &    chf_const_real[aushockvel],
     &    chf_const_real[aucenter],
     &    chf_const_real[aupreshockpress],
     &    chf_const_real[aupreshocktemp],
     &    chf_const_vr[aumassfrac],
     &    chf_const_int[aushocknorm],
     &    chf_const_int[aushockback])

      integer ivar

#include "EBPlanarReactiveShockCommon.fh"
#include "EBEOSCommon.fh"
#include "EBREACTIVECommon.fh"


      shockvel = aushockvel
      shockcenter = aucenter
      shocknorm = aushocknorm

      preshockpress = aupreshockpress
      preshocktemp = aupreshocktemp

ccccc  NOTE: set preshock and postshock mass fracs to be same at time = 0
cccc            not entirely true.. figure out a way    

      do ivar = 1,NKK
        Y1(ivar) = aumassfrac(ivar-1)
        Y2(ivar) = aumassfrac(ivar-1)
      enddo

      initialguess = 0.1

ccc call routine to compute postshockvalues given preshockvals   
      call getpostshockprops()   

ccc set levels of smallnitude
      smallr = small*preshockdense
      smallu = small*postshockvel
      smallp = small*preshockdense*half*postshockvel*postshockvel

      return
      end
ccccccccccccccccccccccccccccccc

      subroutine setsinewave(
   &     chf_const_realvect[aucenter],
   &     chf_const_real[aurnot],
   &     chf_const_real[aupress],
   &     chf_const_real[autemp],
   &     chf_const_vr[aumassfrac],
   &     chf_const_real[aumach],
   &     chf_const_real[ausmallness])

      integer ivar
      real_t press, temp
#include "SinewaveCommon.fh"
#include "EBREACTIVECommon.fh"
#include "EBEOSCommon.fh"

      chf_dterm[
      centerx = aucenter(0);
      centery = aucenter(1);
      centerz = aucenter(2)]

      press = aupress
      temp = autemp

      do ivar = 1,NKK
        massfrac(ivar) = aumassfrac(ivar-1)
      enddo

      rnot = aurnot

      smallr = ausmallness
      smallu = ausmallness
      smallp = ausmallness

      mach = aumach

      return
      end
ccccccccccccccccccccccccccccccc

      subroutine getpostshockprops()

      real_t rho,rhol,rhor, P,Pl,Pr, PCGS, T,Tl,Tr  
      real_t u,ul,ur, v, vl, vr, h1,h1l,h1r, h2,h2l,h2r, h0 
      real_t dv, tol, err , f,fl,fr, vold, rhoCGS

#include "EBPlanarReactiveShockCommon.fh"
#include "EBEOSCommon.fh"
#include "EBREACTIVECommon.fh"

cccc from P1,T1,Y1 get RHO1
      PCGS = preshockpress*10d0
      call CKRHOY(PCGS,preshocktemp,Y1,ICKWRK,RCKWRK,preshockdense)
      preshockdense = preshockdense*1000
      call CKHBMS(preshocktemp,Y1,ICKWRK,RCKWRK,h0)
      h0 = h0*0.0001
 
cccc initguess is set to be 0.1 in planarshock common block
cccc set up the iterative scheme to calculate post shock values 

cccc  scheme start:
      v = initialguess
      dv = 0.001
      tol = 0.001

      do while (abs(err) < tol)
        vl = v-dv
        vr = v+dv
        rho = preshockdense/v
        rhol = preshockdense/vl
        rhor = preshockdense/vr
        
        P = preshockpress + preshockdense*shockvel*shockvel*(1-v)
        Pl = preshockpress + preshockdense*shockvel*shockvel*(1-vl)
        Pr = preshockpress + preshockdense*shockvel*shockvel*(1-vr)

        h1 = h0+0.5*shockvel*shockvel*(1-v*v)
        h1l = h0+0.5*shockvel*shockvel*(1-vl*vl)
        h1r = h0+0.5*shockvel*shockvel*(1-vr*vr)
 
        PCGS = P*10d0
        rhoCGS = rho/1000d0
        call CKTEMPY(PCGS,rhoCGS,Y1,ICKWRK,RCKWRK,T)
        
        PCGS = Pl*10d0
        rhoCGS = rhol/1000d0
        call CKTEMPY(PCGS,rhoCGS,Y1,ICKWRK,RCKWRK,Tl)
       
        PCGS = pr*10d0
        rhoCGS = rhor/1000d0
        call CKTEMPY(PCGS,rhoCGS,Y1,ICKWRK,RCKWRK,Tr)

        call CKHBMS(T,Y1,ICKWRK,RCKWRK,h2)
        h2 = h2*0.0001
        call CKHBMS(Tl,Y1,ICKWRK,RCKWRK,h2l)
        h2l = h2l*0.0001
        call CKHBMS(T,Y1,ICKWRK,RCKWRK,h2r)
        h2r = h2r*0.0001
        
        f = h1-h2
        fl = h1l-h2l
        fr = h1r-h2r

        vold = v
        
        v = v - f*(vr-vl)/(fr-fl)

        err = v - vold  
      enddo   

      postshockdense = preshockdense/v
      postshockvel = shockvel*v
      postshockpress = preshockpress + preshockdense*shockvel*shockvel*(1-v)
      
      PCGS = postshockpress*10d0
      rhoCGS = postshockdense/1000d0
      call CKTEMPY(PCGS,rhoCGS,Y1,ICKWRK,RCKWRK,postshocktemp)

      return
      end

cccccccccccccccccccccccc
ccccccccccccccccccccccc

        subroutine planarshockinit(
     &    chf_fra[u],
     &    chf_const_real[dx],
     &    chf_box[box])

        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        integer ivar
        real_t density, energy, momentum(0:CH_SPACEDIM-1), specDense(0:40)

#include "EBREACTIVECommon.fh"

        chf_multido[box;i;j;k]

        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k]

c       specDense is useless here.. sent just to fill argument 
        call pointplanarshockinit(density, momentum, energy, specDense,40, iv, dx)

        chf_dterm[
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]

        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy

c        print*,'initial energy',energy

        do ivar = 0,NKK-1
          u(chf_ix[i;j;k],CSPEC1+ivar) = density*Y(ivar+1);
        enddo
        chf_enddo

        return
        end
ccccccccccccccccccccc
ccccccccccccccccccccc

        subroutine pointplanarshockinit(
     &    chf_real[density],
     &    chf_realvect[momentum],
     &    chf_real[energy],
     &    chf_vr[specDense],
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        real_t xval, ke, ri
        integer idir,ivar
        integer tshockn
        real_t tpostshockvel, tpreshockpress, tpostshockpress
        real_t tpreshocktemp, tpostshocktemp, tshockvel, tshockcenter
#include "EBPlanarReactiveShockCommon.fh"
#include "EBEOSCommon.fh"
#include "EBREACTIVECommon.fh"

c     debug
        tshockn = shocknorm
        tpostshockvel = postshockvel
        tpostshockpress=postshockpress
        tpreshockpress=preshockpress
        tpostshocktemp=postshocktemp
        tpreshocktemp=preshocktemp
        tshockvel = shockvel
        tshockcenter = shockcenter
c     end debug

        ri = iv(shocknorm)

        xval = (ri + 0.5)*dx

c     momentum only nonzero in one component
c     fixed in postschock stuff
        do idir = 0, CH_SPACEDIM-1
           momentum(idir) = zero
        enddo

        if(((.not.shockbackward).and.(xval .gt. shockcenter)).or.
     &     ((     shockbackward).and.(xval .le. shockcenter))) then
c     on pre-shock side
           density = preshockdense
c     momentum stays zero
c     mass fracs
            do ivar = 1,NKK
              Y(ivar) = Y1(ivar)
              specDense(ivar-1) = density*Y(ivar)
            enddo

            call CKCVCoeff(preshocktemp, ICKWRK, RCKWRK, Cvs, IPolyOrder)
            call CKCVCoeffAvg(Y,Cvs,a_298,b_298)
            energy = a_298(IPolyOrder+1) 
            do ivar = 1,IPolyOrder
              energy = energy + (b_298(ivar))*(preshocktemp**ivar)
            enddo
            energy = energy*0.0001
            energy = energy*density
c            print*,'preshocktemp',preshocktemp
        else
c     on post-shock side
          density = postshockdense
c          density = preshockdense
c          postshocktemp = preshocktemp
c          postshockvel = 0d0
c          postshockpress = preshockpress
c     momentum only nonzero in one component
           momentum(shocknorm) = density*postshockvel
           ke = half*postshockvel*postshockvel
c     mass fracs
            do ivar = 1,NKK
              Y(ivar) = Y2(ivar)
              specDense(ivar-1) = density*Y(ivar)
            enddo

            call CKCVCoeff(postshocktemp, ICKWRK, RCKWRK, Cvs, IPolyOrder)
            call CKCVCoeffAvg(Y,Cvs,a_298,b_298)
            energy = a_298(IPolyOrder+1) 
            do ivar = 1,IPolyOrder
              energy = energy + (b_298(ivar))*(postshocktemp**ivar)
            enddo
            energy = energy*0.0001 + ke
            energy = energy*density
        endif

      return
      end
ccccccccccccccccccccc

      subroutine sinewaveinit(
     &    chf_fra[u], 
     &    chf_const_real[dx], 
     &    chf_box[box]) 
 
        integer chf_ddecl[i;j;k]
        integer iv(0:CH_SPACEDIM-1)
        integer ivar 
        real_t density, energy, momentum(0:CH_SPACEDIM-1), specDense(0:40)

#include "EBREACTIVECommon.fh"
 
        chf_multido[box;i;j;k]
 
        chf_dterm[
        iv(0) = i;
        iv(1) = j;
        iv(2) = k] 
 
c       specDense is useless here.. sent just to fill argument
        call pointsinewaveinit(density, momentum, energy, specDense,40, iv, dx)
 
        chf_dterm[ 
        u(chf_ix[i;j;k],CMOMX) = momentum(0);
        u(chf_ix[i;j;k],CMOMY) = momentum(1);
        u(chf_ix[i;j;k],CMOMZ) = momentum(2)]
 
        u(chf_ix[i;j;k],CRHO) = density
        u(chf_ix[i;j;k],CENG) = energy
 
c        print*,'initial energy',energy
 
        do ivar = 0,NKK-1 
          u(chf_ix[i;j;k],CSPEC1+ivar) = density*Y(ivar+1);
        enddo
        chf_enddo 

        return
        end 
ccccccccccccccccccccc 

      subroutine pointsinewaveinit(
     &    chf_real[density], 
     &    chf_realvect[momentum], 
     &    chf_real[energy], 
     &    chf_vr[specDense], 
     &    chf_const_intvect[iv],
     &    chf_const_real[dx])

        integer chf_ddecl[i;j;k]
        integer ivar
        real_t  chf_ddecl[xval; yval; zval]
        real_t  chf_ddecl[vx; vy; vz]
        real_t chf_ddecl[xcenter;ycenter;zcenter]
        real_t rad0sqr,radsqr,pressure, vtheta, rad, sound, rnotsq
        real_t normradsq, bumpval,pie, sumvel, ke, d, PCGS


#include "EBEOSCommon.fh"
#include "EBREACTIVECommon.fh"
#include "SinewaveCommon.fh"

        pie = PI
        chf_dterm[
        xcenter = centerx;
        ycenter = centery;
        zcenter = centerz]

        chf_dterm[
        i = iv(0);
        j = iv(1);
        k = iv(2)]


c        chf_dterm[
c        xval = (i + half)*dx - xcenter;
c        yval = (j + half)*dx - ycenter;
c        zval = (k + half)*dx - zcenter]

        chf_dterm[
        xval = i*dx;
        yval = j*dx;
        zval = k*dx]

        radsqr = chf_dterm[xval*xval; + yval*yval; + zval*zval]
        rad = sqrt(radsqr)

        rnotsq = rnot*rnot
        normradsq = rad/rnot
c        bumpval = sin(half*pie*normradsq)*(sin(half*pie*(one -normradsq)))
c        normradsq = 100.*(rad/rnot - half)*(rad/rnot - half)
c        bumpval =  exp(-normradsq)

c        bumpval = sin(pie*rad/rnot)*sin(pie*rad/rnot)

        d = 0.5 + 0.25*sin(2*pie*xval)

        if ((0 .le. yval) .and. (yval .le. (d-0.1))) then
           bumpval = 1
         else if (((d-0.1) .lt. yval) .and. (yval .le. d)) then
           bumpval = 0.3 - 7*(yval-d)
         else if ((d .lt. yval) .and. (yval . le. (d+0.1))) then
           bumpval = 0.3 + 7*(yval-d)
         else
           bumpval = 1
         end if


         pressure = press*(one + 0.01*mach*bumpval)      
         PCGS = pressure*10d0

         do ivar = 1,NKK
            Y(ivar) = massfrac(ivar)
            specDense(ivar-1) = density*Y(ivar)
         enddo 

         call CKRHOY(PCGS,temp,Y,ICKWRK,RCKWRK,density)
         density = density*1000

#if CH_SPACEDIM==2
c        vx =  -vtheta*yval*bumpval
c        vy =   vtheta*xval*bumpval
        vx = 0d0
        vy = 0d0
#else
        rx = sqrt(zval*zval + yval*yval)/rad
        ry = sqrt(zval*zval + xval*xval)/rad
        rz = sqrt(xval*xval + yval*yval)/rad

        vx = -bumpval*vtheta*rx/rad
        vy =  bumpval*vtheta*ry/rad
        vz =  bumpval*vtheta*rz/rad
#endif

        chf_dterm[
        momentum(0) = density*vx;
        momentum(1) = density*vy;
        momentum(2) = density*vz]

        chf_dterm[
        sumvel  = vx*vx;+vy*vy;+vz*vz]

        ke = half*sumvel

        call CKCVCoeff(temp, ICKWRK, RCKWRK, Cvs, IPolyOrder)
        call CKCVCoeffAvg(Y,Cvs,a_298,b_298)
        energy = a_298(IPolyOrder+1)
        do ivar = 1,IPolyOrder
          energy = energy + (b_298(ivar))*(temp**ivar)
        enddo
        energy = energy*0.0001 + ke
        energy = energy*density
 
      return
      end 
ccccccccccccccccccccc

      subroutine SLOPEBCS(
     &     CHF_FRA[dW],
     &     CHF_CONST_FRA[W],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[dir],
     &     CHF_BOX[loBox],
     &     CHF_CONST_INT[hasLo],
     &     CHF_BOX[hiBox],
     &     CHF_CONST_INT[hasHi])

      integer CHF_DDECL[i;j;k],CHF_DDECL[ioff;joff;koff]
      integer CHF_DDECL[inorm;itan1;itan2],spacedim
      real_t dvhi,dvlo,dvmin

      spacedim = CH_SPACEDIM

      CHF_DTERM[
      ioff = CHF_ID(0,dir);
      joff = CHF_ID(1,dir);
      koff = CHF_ID(2,dir)]

      CHF_DTERM[
      inorm = QVELX + dir;
      itan1 = QVELX + mod(dir + 1,spacedim);
      itan2 = QVELX + mod(dir + 2,spacedim)]

      if (hasLo .eq. 1) then
         CHF_MULTIDO[loBox;i;j;k]
         dW(CHF_IX[i;j;k],QRHO) = zero
         dW(CHF_IX[i;j;k],QPRES) = zero

c         dvhi = W(CHF_IX[i + ioff;j + joff;k + koff],inorm) -
c     &        W(CHF_IX[i       ;j       ;k       ],inorm)
c         dvlo = W(CHF_IX[i       ;j       ;k       ],inorm)*two

c         dvmin = min(two*abs(dvhi),abs(dvlo))*sign(one,dvlo)

c         if (dvlo*dvhi .lt. zero) dvmin = zero

         CHF_DTERM[
         dW(CHF_IX[i;j;k],inorm) = zero;
         dW(CHF_IX[i;j;k],itan1) = zero;
         dW(CHF_IX[i;j;k],itan2) = zero]
         CHF_ENDDO
      endif

      if (hasHi .eq. 1) then
         CHF_MULTIDO[hiBox;i;j;k]
         dW(CHF_IX[i;j;k],QRHO) = zero
         dW(CHF_IX[i;j;k],QPRES) = zero

c         dvhi = W(CHF_IX[i       ;j       ;k       ],inorm) -
c     &        W(CHF_IX[i - ioff;j - joff;k - koff],inorm)
c         dvlo = -W(CHF_IX[i       ;j       ;k       ],inorm)*two

c         dvmin = min(two*abs(dvhi),abs(dvlo))*sign(one,dvlo)

c         if (dvlo*dvhi .lt. zero) dvmin = zero

         CHF_DTERM[
         dW(CHF_IX[i;j;k],inorm) = zero;
         dW(CHF_IX[i;j;k],itan1) = zero;
         dW(CHF_IX[i;j;k],itan2) = zero]
         CHF_ENDDO
      endif

      return
      end

cccccccccccccccccc
      subroutine extrapbc(
     &     chf_fra[flux],
     &     chf_const_fra[wextrap],
     &     chf_const_real[dx],
     &     chf_const_int[facedir],
     &     chf_const_int[nspec],
     &     chf_box[box])

      integer chf_ddecl[i;j;k], ivar
      real_t primitive(0:QNUM+nspec-1)
      real_t fluxvec(0:FNUM+nspec-1)
      integer fnum, qnum
#include "EBEOSCommon.fh"
      fnum = FNUM+nspec-1
      qnum = QNUM+nspec-1
      chf_multido[box;i;j;k]

      do ivar = 0, QNUM-1
         primitive(ivar)  = wextrap(chf_ix[i;j;k], ivar)
      enddo

      call pointgetflux(fluxvec, fnum, primitive, qnum, facedir)

c     momenflux already correct for rz coords
      do ivar = 0, FNUM-1
         flux(chf_ix[i;j;k], ivar) = fluxvec(ivar)
c         flux(chf_ix[i;j;k], ivar) = 0d0
      enddo

      chf_enddo

      return
      end

ccccccccccccccccc
      subroutine SLIPWALLSOLIDBC(
     &     CHF_FRA[F],
     &     CHF_CONST_FRA[Wextrap],
     &     CHF_CONST_INT[lohisign],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_INT[facedir],
     &     CHF_BOX[box])

      integer chf_ddecl[i; j; k]
      integer ivar 
#include "EBEOSCommon.fh"
#include "EBREACTIVECommon.fh"

      CHF_MULTIDO[box;i;j;k]

      F(CHF_IX[i;j;k],CRHO) = zero
      F(CHF_IX[i;j;k],CENG) = zero

      CHF_DTERM[
      F(CHF_IX[i;j;k],CMOMX) = zero;
      F(CHF_IX[i;j;k],CMOMY) = zero;
      F(CHF_IX[i;j;k],CMOMZ) = zero]

      do ivar = 0,NKK-1
       F(CHF_IX[i;j;k],CSPEC1+ivar) = zero
      enddo

      F(CHF_IX[i;j;k],CMOMX + facedir) = Wextrap(CHF_IX[i;j;k],QPRES)

      CHF_ENDDO

      return
      end

